(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{523:function(i,v,_){"use strict";_.r(v);var l=_(4),t=Object(l.a)({},(function(){var i=this,v=i.$createElement,_=i._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":i.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",[i._v("回顾了一下这两周来做的力扣题目，感觉虽然有零星的收获，包括快速乘法、前缀后缀积、并查集、单调栈等，但是由于主要跟着力扣每日一题来做，太零散了不系统。")])]),i._v(" "),_("p",[i._v("后面的话计划按照分类来做，每一类做10~20题，然后回过头来再对经典题型进行复习回顾，力求举一反三。")]),i._v(" "),_("ul",[_("li",[i._v("Array")]),i._v(" "),_("li",[i._v("String")]),i._v(" "),_("li",[i._v("Math")]),i._v(" "),_("li",[i._v("Tree")]),i._v(" "),_("li",[i._v("Backtracking")]),i._v(" "),_("li",[i._v("Dynamic Programming")]),i._v(" "),_("li",[i._v("LinkedList")]),i._v(" "),_("li",[i._v("Binary Search")]),i._v(" "),_("li",[i._v("Matrix")]),i._v(" "),_("li",[i._v("DFS &BFS")]),i._v(" "),_("li",[i._v("Stack & PriorityQueue")]),i._v(" "),_("li",[i._v("Bit Manipulation")]),i._v(" "),_("li",[i._v("Topological Sort")]),i._v(" "),_("li",[i._v("Random")]),i._v(" "),_("li",[i._v("Graph")]),i._v(" "),_("li",[i._v("Union Find")]),i._v(" "),_("li",[i._v("Trie")]),i._v(" "),_("li",[i._v("Design")])]),i._v(" "),_("p",[i._v("Leetcode本身并没有顺序， 并且类别分的并不是非常好，因为大量非最优解也涵盖在各种类别中。 所以依据最优解的类别，难度重新划分。可以节省时间，更有效率的做题，减少很多刷题的负担。")])])}),[],!1,null,null,null);v.default=t.exports}}]);